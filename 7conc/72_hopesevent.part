\section{Limited-Time Only}

In Section 6.1, I developed the idea that taking action can be associated with a great deal of uncertainty around what will be necessary in order to explore interest in a particular new tool or skill. Statements like, ``I could do this all [day/week/month], I could let it take up that time, but I'll just see how far I get in [a more limited span] and that's that'' are therefore not uncommon. However, the ability to stick to these self-imposed limits varies from person to person. A workshop event provides opportunity by way of its structure  for something which there is already enough interest.  Events provide structure in terms of time limitations as well as in terms of curriculum and helpers. The \textit{existence} of this structure is an important benefit of the event: it makes the investment and leap of acting on an intention to implement some change more accessible. In other words, time limits and temporary ``software-advisor'' resources help build \textbf{opportunity} and concentrate \textbf{momentum}.

The RegionalNowcast-Model team had adopted not only specific technologies (iPython Notebook) but was also deliberately adapting some of the social protocols (such as feedback on code, as described, in Section 5.3). The PI of this group has been instrumental in starting and maintaining an annual SWC event for several years serving earth and ocean scientists\footnote{I had made contact with this team in the context of an instructor training event that some of the group members had attended}. Additionally, during the course of observations conducted in this study, this team also hosted a day-long ``software sprint'' event, which was preceded by an excited email to the attendees (which included both typical members, and a few new people who had not worked with this stack before), excerpted below:

\pplquote{RegionalNowcast-Model team PI}{Rules: Maintain a respectful environment. Learning is a big part, if its most of what you accomplish in the day, that's just fine.\\
             Rule of two feet: If its not working for you, if you don't feel you are learning or contributing, you should ask to work on something else, or you should move on.\\
             My Goals: team building, have fun, energize the stakeholders-request part of the project, everyone learn and if we get some advances in the code, that would be good too.\\
             Teams: we have google doc that I will send you all access to.  It lists the projects.  Based on these projects, we ask you to sit with a partner that is working on a synergistic project.  As you work on projects, add notes, questions, comments to the google doc -- choose a color!\\
             suggestions welcome, I haven't done this before!}


Like the joint visualization meeting hosted by a post-doc in the BioGeoChem-Model team (described in Sectio 6.3), the explicit goals of the RegionalNowcast-Model sprint were first and foremost interpersonal and awareness-building. In both cases, the intentions (to build awareness and to try out the tool-stack) were articulated informally and over email. As noted in Chapter 6, the uncertainty associated with ``taking the plunge.'' The shared document mentioned in the email above hints at the way that this group uses persistent digital artifacts to maintain momentum and encourage participation. The PI of RegionalNowcast-Model group is updating the TODOs in the current shared document as it is projected during a weekly code-centered meeting: ``it's great fun to see what everybody is doing! Very energizing!'' Besides enthusiasm about code work, and her willingness to create a space where taking time to set up an effective working environment is okay (see email above), at least as important is her relentless closeness to the code work.

The PI of the CustomInstrument-Lab is a lot less engaged with the code work, partly because the members of the group that do code work have others from whom to seek help with code and they purposely try to use her time chiefly on ``the science part.'' At one point she misunderstands a statement in a meeting and responds with a sense of urgency, ``I thought that was in there!'' (regarding a piece of vital information). The three people most involved immediately jump in to reassure that the statement that precipitated the reaction is not nearly so dire (the data exists, but requires a join - it is both technically possible and practically plausible). When this PI attempts to ``turn up the heat'' and create some additional momentum and enthusiastic kind of pressure for creating a data visualization, this request is not armed with an accurate estimation of difficulty and does not carry as much weight. Code in such an environment settles almost immediately into invisibility when it works, and draws panic and dissatisfaction when it does not. \kt{star infrastructures} This harsh judgment is omnidirectional: from the oceanographers to the computer science collaborators, but also from the oceanographers to themselves, often expressing frustration with tasks taking ``too long'' with ``nothing to show for it.'' The different in recognition is not the enthusiasm of the PI - both are warm, genuine, encouraging, and use their financial resources to create room for innovation - but the \emph{specificity} of the encouragement.

As I developed in the section on the collective imagination of the perfect world, discussing goals for code work that have elements of the presently-impossible is a common way to create direction in a highly uncertain environments. At some point, as the PI of the CustomInstrument-Lab group says that she has been promising that the visualization dashboard will be ready, because she ``wanted to up the ante a bit,'' meanwhile George repeats - before and after her comment - that documentation is really important. After all, if the ante is up all the time, and code is in a state of near-constant emergency, not making time for documentation sets up larger problems later on: see \emph{The Departure} story in Section 3.3 for more on this. If anything, this illustrates one of the primary challenges to code work in science: when a task is urgent, it is liable to be done in a way that incurs technical debt to be paid later; when it is merely important and not urgent, it goes by the wayside of other urgent and important tasks. Knowing when to uncompromisingly invest time into something that is not urgent but widely recognized as important takes self-discipline, social acceptance, and/or experience.

That said, it is not like the attitude of the RegionalNowcast-Model group makes them immune to rushing code and the inevitable resulting mess: Erin reflects on the work of an undergraduate summer research intern, whose project was ``really cool, but really rushed... there is more clean-up we could have done... but I hope [the undergraduate intern] learned and had fun.'' Andrew, the in-house software advisor for the CustomInstrument-Lab, calls this ``gradware:'' published software ``left to die,'' the physical manifestation of tensions between software production and academic success. He credits the PI of the team for allowing him, and others in her group (but outside the team studied) to focus on code work and therefore be able to invest time into maintenance.

PI of the RegionalNowcast-Model team makes an effort to bring achievements to the surface and to praise them, through both verbal acknowledgement and recognition, and through the use of a shared digital artifact, the ``whiteboard.'' This is a GoogleDocs drawing, which is filled with dense areas of text in a mutli-column layout. Before their weekly meeting - a meeting that is specific to this particular project, and where specific code issues are raised, not only higher-level research planning and community-and-stakeholder-management issues - the PI (as well as other group members which I've shadowed prior to observing the meeting) check the board, and make any updates to reflect their progress. Everyone has a color that is associated with them; at one point, Ed the software advisor had made many changes and additions, and his color seemed to take up a lot of area, and this was recognized verbally in the beginning of the meeting. The meeting hinges on going through this document, acknowledging all the work that has been done, and resolving any outstanding issues. For each group member, the dynamic is a bit different; for example, one of the post-docs, Lindsay, spends most of her time grappling with FORTRAN code and adding parameters to the model, so her updates are sometimes as short as, ``yep, still working on [mystery issue],'' which elicits either a friendly encouragement or some guidance on what could possibly be going on based on prior experience from either the PI or the software advisor.

Other group members, including junior graduate student Angela and post-doctoral research fellow Erin, often include links (in their individual colors, of course) to iPython Notebooks with their most recent scientific explorations of data. During the meeting, the PI clicks on these, and scrolls through, as the graphics and associated code and comments are displayed on the projector. The researcher who produced the charts talks through them, and each chart gets at least half a minute (usually considerably more) of silent consideration from the room, and a handful of follow-up questions. If I were late to such a meeting, and they were displaying the charts of a researcher and discussing them, I could guess just by the axes, the coloring, and the layout whose chart this was; this is not because different researchers have such distinct artistic preferences, but because the questions that they are exploring map onto a specific, distinct, and identifiable set of visual cues (see the last subsection of Section 2.3, which discusses some of the visual cues.)

The digital whiteboard document therefore gets filled over the course of a few meetings with links, updates, open questions and so on. Aside from organizing by color, the document is also sectioned off into a handful (half a dozen) areas of work. These include things like ``Josh's Paper on [subject]'' and ``Upgrade.'' (The latter is described in the case study, \emph{The Upgrade}). When it is filled, they create a new document, carrying over any information that is still necessary and relevant. At one point, as the team meets without the PI, who is out of town but who has encouraged them to meet without her, Erin considers the dense document and asks: ``do you guys want to start a new board? It's starting to get really full...'' and the verdict comes to ``let it get really full!'' with a hint of satisfaction at looking at this artifact of productivity. In a meeting with students, who had only recently began to work with the codebase, jump-started their involvement in the sprint, introduced above. The PI of the RegionalNowcast-Model team tells one of the students: ``when the [date] nowcast is up, then you will see your arrow there!'' She is referring to a particular analysis that he was ale to add during the sprint, with a great deal of pair-programming-type help from the PI and other members of the RegionalNowcast-Model team and after several hours of setting up.

It is the quality, rather than the quantity, of external feedback that is important. The RegionalNowcast-Model team, has created and maintains an online visualization dashboard which shows the results of their models forecasting a day in the future (``nowcast'') for a particular region. The software advisor of the RegionalNowcast-Model group talks about another group and how they do analytics over their software (``they care \emph{a lot},'' he tells me, as a follow up to telling me about how in the RegionalNowcast-model team, though they have a website, they do not collect analytics.) Collecting data on the number of visits to their site or more specifically to the documentation/tutorial page they maintain as a service to the broader community, the PI reads aloud the occasional email she gets to the tune of ``this is great! thank you for doing this! we aspire to do this, too!'' The quality, not quantity of feedback matters; this is also the case among some of Trainer et al.'s motivations for extra work \cite{trainer2015personal}. And when George and Andrew, from the CustomInstrument-Lab, are talking about the software they are building and making it available on GitHub (which it is), the conversation readily acknowledges that only a handful of people could be considered potential users. This also comes up in interactions among the members of the BioGeoChem-Model team who were routinely spending time with older projects from prior research collaborations that someone has emailed them about, in a classic example of a motivation for ``extra work'' \cite{trainer2015personal}.

\subsection*{Take-Away for Evaluation}

\textbf{Focusing on technological deliverables and goals creates pressure; focusing on time spent cultivating community or learning a new vocabulary or way of thinking creates momentum.} Events like the workshops and sprints have a variety of benefits and purposes aside from learning the content of the curriculum, or in achieving certain tasks. Both regarding the department-wide SWC workshop  and the sprint for the common RegionalNowcast-Model tasks, the PI stresses the importance of (1) building community and (2) learning something. Then, as the team members attending the sprint get each successive task done, she is increasingly enthusiastic, having set her expectations to be strategically exceeded. In the words of an interviewee from Chapter 6, the things that look uncertain and unapproachable sometimes (more often than not) turn out to ``not be nearly so bad'' - in many cases, momentum is needed rather than pressure, because the pressure is already shared by a group working toward a common goal.

Of the post-SWC interviewees, most were no longer using the specific skills taught a few months later, and some had some inaccuracies or confusions in their understanding of the concepts. However, all cited being much more confident in their own ability to seek out the right resources as needed, or engage with local or on-line community resources. One of the major benefits of time-limited events, like workshops and casual seminars, is that they allow for building community resource momentum \textit{as a foundation} to additional code work. Not emphasizing concrete deliberables in the RegionalNowcast-Model team did not deter the participants from finishing large programming challenges facing the group; on the contrary, they remained in the lab beyond the official end of the event with a great deal of excitement and dedication to the actual projects. Afterwards, they felt energized, accomplished, and exhausted the next day: the downside of the sprint is that it is not a sustainable strategy for daily work, but rather a boost when it is needed.