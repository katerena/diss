\section{Summary}

Code and computer work can challenge to what it means to ``do science.'' Jackson and Barbrow argue,  based on an ethnographic study of cyberinfrastructure project in oceanography that ``some of the most profound and important questions around computational change in the sciences may in fact be vocational in nature, producing basic changes in the sense of what it means to `be' an ecologist, and to `do' ecology'' \cite{jackson2013infrastructure}. Scripting is increasingly common in ecology \cite{mislan2016elevating}. Sennett elaborates the notion of vocation, of ``craftsmanship,'' as being ``dedicated to good work for its own sake'' where labor elevated above being the means to another end \cite{sennett2008craftsman}. Though it is temping, as a computer scientist, to take the aesthetics and craft of code work for granted and to see software tools and skills as a means to greater efficiency of discovery in science, experimental software (e.g., the cyberinfrastructure project, or a tool arising from a collaboration with scientists, such as Grochow et al's hybrid client-and-cloud visual analytics program \cite{grochow2010client}) demands more than just patience and attention from the target users, but engagement with code work itself, which can imply a major qualitative shift in work.

On the other hand, it may not be nearly as transformative in contexts where programming has been an integral part of scientific practice. These existing code work practices, though, can sometimes be perplexing from a computer scientist perspective, which sees ways that this code work is unnecessarily painful (e.g., debugging and testing is difficult because abstraction is minimal, and design is not a distinct part of the process), and would (implicitly or explicitly) recommend adoption of particular best practices \cite{heaton2015claims,sletholt2011literature,wilson2014best,leach2009freedom}. Heaton and Carver, in a review of literature that makes claims about software practices in science, distinguish ``kleenex'' software (ad-hoc, single-use), from ``library/resource'' software in the sciences, specifically in computational modeling \cite{heaton2015claims}. Trainer et al., in studying motivations of scientists to undertake ``extra work,'' consider larger projects of the ``library'' variety \cite{trainer2015personal}, as do Paine et al. in their study of code co-production with data in a large radio astronomy collaboration. Sometimes ``kleenex'' software is equated with ad-hoc, non-reproducible code practice that is implicitly inadvisable and, in a perfect world, would be replaced by better, more holistic analytic tools (e.g., \cite{howe2008end}).