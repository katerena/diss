\chapter{Background and Related Work}

\kt{THIS CHAPTER HAS TWO SECTIONS: one on scientific software production and one on oceanography}

\litquote{edwards2010vast}{It is easy to forget that data are never an abstraction, never just ``out there.'' We speak of ``collecting'' data, as if they were apples or clams, but in fact we literally \textit{make} data.}

The above quote is excerpted from a passage in \textit{A Vast Machine} which describes how the act of digitizing an analog temperature reading is an act of constructing data. Increasingly, data are \textit{co-produced} with code in science, as Paine and Lee find in an ethnographic study of a radio astronomy collaboration \cite{paine2014producing}. As environmental data is increasingly more available, instances of ``data avalanche'' in the 2000s \cite{howe2008end} or  ``explosion of data'' in the 1950s \cite{edwards2010vast} correspond to vocational shifts in what it means to ``be'' an ecologist or ``do'' ecology \cite{jackson2013infrastructure}. In Section 2.3, I summarize aspects of the study of oceanography relevant to the forthcoming discussions of code work, and of narrating problems and their solutions.

Vocational shifts  in the amount of computational work affect these areas and fields differently. The coding practice of a computational modeling researcher can come under critique for lacking abstraction or formal testing \cite{heaton2015claims}. The researcher who works with increasingly large amount of field data that demand learning new ways of automation is urged not only to learn and use these even-evolving skills, but also share the results as an increasingly important record of scientific work \cite{mislan2016elevating}. The broadly-scoped values and philosophies of sharing, automation, and scalability are in practice implemented by way of ``small-scale and immediately practical issues,'' which is why one of the most popular workshops for scientists learning programming calls itself Software \textit{Carpentry} rather than Software \textit{Engineering} \cite{wilson2006software}. Section 2.1 reviews literature that investigates, critiques, or seeks to change \textit{software practice in scientific contexts}. Section 2.2 subsequently expands to include \textit{designed interventions} that seek to transform scientific practice, spanning both tools (e.g., visual analytics pipelines) and social initiatives (e.g., Software Carpentry workshops).

Studying anything about the ocean is difficult for many reasons. The ocean covers two thirds of the earth's surface. Regional and global patterns of movement are subject to the seasons, as well as major anthropogenic influences, like the melting of ice that produces freshwater with a different density than its surroundings.  Organisms use up nutrients, die, and reproduce over the course of a day. Human activity, such as overfishing, influences the inhabitants of a complex dynamical system in a manner that is not only hard to interpret in term of future implications, but it is also hard to understand in the present. How many organisms of a particular kind are there? Even if they are big enough to count, they move all the time. What was the visibility underwater when the counting was done? How much of some nutrient or substance is there? Was it measured by submerging an instrument to a certain depth while at sea? How certain are we that the ship, in its movement, was not carrying  anything in its wake, or otherwise contaminating the findings? What is the shape of the ocean floor, the overall character of circulation patterns, the changes of salinity or temperature over the seasons and over time? How do you know your observations are reliable? How do you know your model represents something meaningful about the natural world? The study of the ocean is associated with many uncertainties are different levels. Skepticism and a plurality of complementary methods help make this uncertainty productive, rather than an insurmountable barrier.

Code work is part of this plurality of methods, integrated differently in different ocean science contexts. The place of software in this multi-disciplinary field has been both to enable computational modeling and to enable generating, handling, curating, and comparing increasing quantities of data.  Figure \ref{fig:poc} illustrates a simplification of the loci of ``code work'' in oceanography. Computational modeling allows scientists to make causal claims and formulate hypotheses which can be tested using observation. More robust use of database systems allows the possibility of integrating observational data. Greater scale, resolution, and integration of observational data strengthens its ability to be used as evidence in increasingly complex claims about how the ocean's biology, chemistry, and physics fit together into a coherent system. The coherent understanding of this world benefits from data stewardship efforts that make data more robustly available to scientists who would not otherwise have personal access to that data.



Computation - vocational change in ecology (Jackson+Barbrow, Mislan et al)
Scientific programming: “cradle-to-grave” (Kelly 2015) “amethodical" (Truex et al 2000)
Lack of separation of concerns between software and what it is intended to encode (Heaton & Carver 2015) \tk

Borgman describes data as the ``glue'' of collaboration between scientists and technologists \cite{borgman2012whos}. Indeed, open data is a crucial means to integrate and accumulate knowledge \cite{reichman2011challenges} in a multidisciplinary environment, particularly one that is ``radically unstandardized'' \cite{steinhardt2015anticipation}. From the software engineering research side, particularly when it comes to numerical modelling traditions in the sciences, there is a ``lack of separation of concerns,''\footnote{Patel et al., in a study of programmers attempting to implement machine learning applications and having difficulty because they focus too much on algorithm selection and neglect data debugging \cite{patel2008examining}. This can be summarized as the opposite of the indictment that the scientists worry too much about their data and not enough about their code, leaving us with the unremarkable hypothesis that in problem-solving, people focus on what they know.} no sense of abstraction, where ``the problem to be solved entirely [is] mixed with numerical approaches and target-dependent information'' \cite{palyart2011improving}. Heaton and Carver note a similar claim in their systematic review of claims about software engineering practices in the sciences, specifically modeling \cite{heaton2015claims}. Sletholt, Hannay et al. also find that ``the definition of test cases for validation and verification of the software is  perceived as challenging ... it is often not obvious to  stipulate whether an error lies within the scientific theory or in the  implementation (numerical approximation) of that very theory'' \cite{sletholt2011literature}. In this sense, the software can also be described as ``glue'' - once applied, inextricably and irreversibly linked to the other components. Or, as Ragan et al. note in a Nature article on programming environments for microbial ecology: ``Although computation can be a language that bridges many disciplines, additional `glue' is often needed to make the requirements mutually comprehensible to diverse members of a project team'' \cite{ragan2013collaborative}. Here, the ``glue'' is more the kind of ``social glue'' that Henderson identifies in her work on engineering sketches,  where physical, flexible representations which are preferable the more rigid technological environments because they act - by virtue of their flexibility - as a ``social glue'' between different communities of practice \cite{henderson1991flexible}.

The ``glue'' that holds this chapter together, in its wide-ranging review of half a dozen fields of scholarship, is the existence of scientists who take part in - or want to take part in - many different kinds of code work in the course of scientific craft. The study of adoption of tools is then linked to programming skill acquisition, which is in turn influenced by the context of the scientist and the extent to which certain kinds of code work are pervasive or rewarded. In the study of large collaborations (e.g., oceanography \cite{steinhardt2015anticipation} and radio astronomy \cite{paine2014producing}) or other contexts where there is relatively clear separation of skills and interests (e.g., data gathering at sea with robots \cite{borgman2012whos}), communication and collaboration practices are the focus of study. Outside of these massive projects, the principal investigators (PIs) are responsible for managing diverse groups with disparate skill-sets and backgrounds, for determining which innovations to invest (time, money, and energy) in, for creating additional roles within the group, and for advising the early-career members of that group not only on success within it but also beyond. This may be especially salient in disciplines like oceanography, where there are many different research methods and many different levels of associated collaborative work or major expenses, including software licenses, laboratory equipment, staff roles.

This chapter reviews related literature on programming practices in science (Section 2.1), software interventions for earth, ocean, or ecology research (Section 2.2), and software as it plays a role in the practice of oceanography (Section 2.3). Then, I synthesize these various threads and motivate this study, which is unique in its broad concern with many different kinds of code work in Section 2.4. \tk
