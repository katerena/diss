\chapter{Best Practices, Better Practices}

In the previous chapter, I introduced the \textit{working environment} and the \textit{perfect world}: the working environment is subject to change, which is measured against  a collective imagination of what is possible. In the ``perfect world,'' code is understandable, usable, and extensible (Fig. \ref{fig:perrrfect}). In the ``not ideal'' present, it is some combination that creates a burden of ``extra work'' (see also Trainer et al \cite{trainer2015personal}).

``Best practices'' in software engineering span particular tools or social protocols that aim to ensure these qualities in the code that is produced. Some scholars working at the intersection of software engineering and scientific method development suggest ways in which software engineering best practices can be adapted to the scientific context (e.g., \cite{wilson2014best} is a particularly detailed list of such adaptations). Sletholt et al conducted a review of agile practices as reported in publication manuscripts, where the inclusion criterion included use of agile-related terminology. However, in their findings the authors commented both on practices that were identified as agile, and those which \textit{appeared} agile \cite{sletholt2011literature}. Easterbrook and Johns find, based on ethnographic study of climate modeling software practices, that rather than lacking formal testing, the testing done is simply distinct from that in the software engineering sense, but no less `formal' of a verification process \cite{easterbrook2009engineering}.


Many of the ``best practices'' are more formal versions of practices that have arisen organically and which are not associated with the formal term. Pair programming is an example, as are other protocols for communication in programming practice, the subject of Section 5.3. I illustrate that it is possible to adopt a tool or practice without reaching the desired goals, illustrated previously in Figure \ref{fig:perrrfect}. However, it is also  possible to reach the goal without actually adopting a particular tool or practice. The execution of code over time \emph{interacts with} other factors that depend on scientific and social context. Human-readable artifacts degrade differently than those that are optimized for machines; though human-readability can sometimes have a very narrow audience that understands the artifact.

%The examples in this chapter describe scenarios where the working environment challenges that people are having are not the ones that are difficult to address by the available tools. OK [ I suggest instead: The examples in this chapter describe scenarios where the working environment challenges are not difficult to address by the available tools.] When an outside observer with software engineering training looks for technical debt of various forms, she inevitably finds it. To some extent, this is acknowledged by the participants in the small ways in which they work to be ``kind to their future selves''\footnote{software advisor from the RegionalNowcast-Model group}. However, there is a strong philosophical and social resistance to automating too much, for example, and sometimes the `technical debt' that is incurred provides ways to stay close and in control. Rather than blaming scientists for being unwilling to adopt better practices, the outside observer may consider what looks like a sub-optimal working environment because it offers something in the way of quality-control checks-and-balances. OK: [I changed pvev sentence- is this what u meant?] ]There is a partially-adversarial relationship between the scientist and her code, wherein it is her job to suspect the code in every manner of wrongdoing until proven otherwise throughout the process. To suggest `just' adopting unit testing, version control, or particular data representation/storage schemes as they are employed in software engineering practice, fails to acknowledge the parts of scientific work which require those processes but are not addressed by the software-engineering tool-stacks.

%This passage about ``moral claims of practical necessity'' \footnote{TODO-citation: the whale and the reactor (p.36)}. The question Winner explores in the beginning is whether certain technologies are necessarily tied to particular political or social factors.

%In the case of adoption of particular software technologies, as explored in the prior chapter, the driver is at least as much the desire to adopt the social practice surrounding that technology as the technology itself.  The relationship, here, between the ``tools'' and the ``social process'' is defined as equivalent to considering the relationship between the ``working environment'' (practical ``what is'') and the ``perfect world'' (imagined ``what could be''). Alternatively this maps onto the thing that is learned (eg, at SWC) \emph{versus} the reason for learning it. The reasons given in interviews with SWC participants stressed that they were motivated to go because they had meant to learn \_ (``been on my todo list'') which in several cases, upon additional questioning, came down to curiosity about the possibilities that the new language would enable, as relayed by a trusted source. The details of this dynamic are the subject of the next chapter. For now, I only highlight that situation where the \emph{primary purpose of adopting a tool or learning a new skill is the expansion of possibilities and imagination.}
%OK:[these words definitions if perfect word, working env should be before u start talking about it, I assumed u defined it earlied and here they area?]
%What is the relationship between the working environment and the imagined perfect world? These terms are introduced and defined in the prior chapter. The key difference between them is concreteness: the working environment is comprised of specific tools, skills, and personal and social resources, which can (and are) all modified over along with\footnote{"along with," rather than "in response to" or "resulting in" due to an interactional view that is pervasive throughout the dissertation.} changing needs and tastes. The perfect world, on the other hand, is an act/product of a collective forward-looking imagination, and (by definition) remains indescribable except by example or in retrospect.

This chapter is organized into three sections, all of which aim to both describe an ideal and the deviations from that ideal in practice. The \textit{ideal} includes philosophy, social practices, and specific tools in varying degrees, and each of the sections attempts to provide a description of these various components. Section 1 focuses on data as \textit{a thing} that must be stored \textit{somewhere}. Section 2 is about version control as a multi-faceted means for coping with time and the challenges of having multiple contributors. Section 3 covers a range of best practices that formalize communication in programming.