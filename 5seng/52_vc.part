\section{Version Control}

Version control is by far the most universal best practice that everyone feels bad about. If we define the best practice as the thing at the end of a phrase like ``*sigh* I should really be using [this best practice]'' we do not need to spend much time observing scientist talk about code before concluding that \textit{git} and \textit{github}, and less common but also acceptable \textit{hg}\footnote{pronounced: mercurial} and \textit{bitbucket}, are best practices, whereas no version control and \textit{svn}\footnote{pronounced: subversion} warrant explanations and apologies. The PI of the RegionalNowcast-Model group - the same one who keeps the team's software advisor ``in check regarding the complexity of his solutions'' - comments on her preference for hg over git, to the point where a departmental workshop on version control which she organized has adapted SWC materials to hg: ``well to be honest, just because I'm more used to it, but also hg is a more limited, simpler, accessible thing for people starting out, but would never tell anyone to switch.'' So I ask if she'd ever intervene if someone was using svn, which she considers for a few moments with hesitation: ``\textit{weeeelllll}... I would suggest that hginit is really small and lightweight\footnote{here, she is comparing the relative complexity of initializing a repository - the ``getting-started'' act} and there is nothing lightweight about subversion.''

Everyone is controlling versions through social agreement, such as using email, files, and access to common machine. However, the question ``do you use version control?'' and the statement ``*sigh* I should start using version control...'' refer more specifically to a utility (usually, git) designed for managing work on complex, evolving codebases over time. The question and statement can also refer to using a particular service, like GitHub, which offers hosting for project (though public), and which also has a desktop client with a GUI to make using git more user-friendly than typing commands in shell. The ``organic'' version control, the kind that is not referred to as ``version control,'' consists of carefully (or sometimes not so carefully) organized folders with a naming scheme peculiar to the small group of people affected by them. In practice, adopting software version control can be a case of tooling solving a different problem than the one people are having. Tooling is not sufficient because tooling is designed for use with code. For GitHub, for example, it's essentially equivalent to other directory-based methods of version control, and less straightforward, when it comes to large data files, images, and furthermore analog information that is vital for reasoning about data provenance. In the case of those things, the code may actually be the lest complex and noteworthy component by comparison.
%OK:[may be you are going to talk about it later but is there any data /numbers how many ppls are using version control in scientific programing, out of curiosity IF u did do study on it and have any quantitative plots would be great to see]
Furthermore, what is "technically possible" is sometimes not what is actually understood and done. According to a conversation between oceanographers and some searching on forums.ni.com, there is a version history tool in LabVIEW which can be connected to a VC system but someone saying that is far more likely to also say "but I don't know how it works really" than to actually give directions. The issues particular to LabVIEW are beyond the scope of this work, but a researcher asking the question of "but why aren't people using this excellent technical capability that they recognize as present and useful?" can, I hope, find some of the conceptual frameworks in this dissertation applicable. %TODO LabVIEW in the wild paper

The question of \emph{what version control actually is} is not a trivial one. As with other things in this chapter, there is a distinction between the \emph{thing} - the specific set of modifications to the working environment necessitated by adoption - and the \emph{reason} - the desirable general outcome. Version control is of uniquely universal interest to this setting, relative to other programming practices and concepts covered in the next section: everyone in the study was either using version control, feeling bad about not using version control, or having a thought-out position on why using version control is not for them. 
For example, having a minimal amount of code, with all the complexity embedded in the data or the mathematics, suggests that though programming is important to that work, the investment of energy into learning to use a particular version control system would not be worth the resulting unnecessary work-flow complication.% This is similar to 
%This is distinct from issue of databases in the prior section, \jinna{why?} which was really only a concern for the one group that had databases research collaborators from computer science. This is also not like the issue of the programming practice and paradigm social concepts in the next section, which are a nice-to-have but relatively less of a source of perceived social pressure or personal regret.

%``Metonymy'' is a figure of speech for calling a whole by the name of a part, such as referring to a car as ``wheels,'' or vice versa. \jinna{what does metonymy have to do with the rest of the paragraph?} It is a common occurrence in conversations about version control.
In conversations about version control, novices may conflate different concepts that have all become entwined with the persuasive language around version control in SWC and SWC-like contexts. They may use any related terms to invoke the whole idea of version control, and likewise interpret ``version control'' to mean any of those things. These terms ranged from specific tools or processes (``merging,'' ``branching,'' ``git,'' ``GitHub'') to broader \emph{team or field} level terms (``best practices,'' ``standards in my new lab,'' ``collaboration with other institutions,'' ``online professional portfolio,'' ``notifications and passive awareness of other research projects'') to larger philosophical principles (``accountability and transparency to stakeholders,'' ``open source software'').  The collapse of these disparate terms into one unified, if ambiguous, notion of version control was revealed when participants - especially those I recruited via SWC events - began talking about something very specific and ended up talking about something much broader: three people, out of ten, said they did not want to use versioning (a specific process) because they did not want their code to be public (broad philosophy), despite the latter not actually being a necessary outcome of the former. All this supports the idea of version control (and related topics) as a kind of gateway best practice, topping an interminable to-do list of ways in which software practice and discourse influence scientific code work.

%TODO chart with all the different VC things
%OK:[wait -- chat? are you adding this? nice]

As mentioned in the prior section, the organization of Software Carpentry curriculum intentionally folds broader philosophical ideas (collaboration, accountability, reproducibility) into a discussion of concrete tools (GitHub) because it is easy to get scientists to be excited to learn about tools, but they are not as open to going to a workshop about how to do science, even though the tools and the practices are interdependent\footnote{via correspondence with Greg Wilson}.

A post-doc in the BioGeoChem-Model group says she is ``trying to use github from an earlier stage,'' which is new for her; she only recently started using github, and so far it has been to make public her more established work. ``It's weird,'' she says. ''I never used version control, saw people use svn, and I didn't see that as useful.'' So she embedded versions in file-names: ``everyone says it's a bad way to do it, but it worked really well for me. I never lost anything.'' She saved new files at ``checkpoints,'' which she says are like commits except that commits are more frequent than her saves. GitHub seemed better than svn (subversion),  so she had ``less of an excuse'' not to do version control. %[OCNA+_FN150609_KK]

When I first ask him about it, the Software Advisor of the BioGeoChem-Model group tells me: there is no version control. It is shared by being on the computer to which both the people who work on it directly have have access, which is sufficient for their needs. Her colleague, also in the BioGeoChem-Model group, comments that while she uses it, he does not: ``I did use git with bitbucket\footnote{another cloud based service for repository hosting, like GitHub. Supports both hg and git, and has the added benefit of free unlimited private repositories for academics, whereas GitHub forces public repositories past a certain number of private ones. This begins to really matter if a researcher organizes her code with one-repository-per-project, as there can be a large number of ongoing or hibernating projects.} until I tried [uploading a too-large file, got locked out]. Tried using it again, was locked out after putting big data files, tried to fix with tech support but lost everything.'' He says he did not use version control in grad school, but ``had organizational problem that was nothing version control would have fixed.'' At grad school, they had a good back-up solution - crash plan - essentially good enough. Now using version control because it’s free. In grad school, he tells me, back up was a big deal: ``there were horror stories: `sprinklers go on in the lab, so have to photocopy/scan the lab notebook!' ''
%[OCNA_FN150618_KK]

At some point while I was shadowing a post-doc in the RegionalNowcast-team, she accidentally erased the data she had been working with on the previous day. ``The data was sitting in the [iPyNB] cell, in this mess of code, I just deleted it.'' Mildly displeased, she went to previous commit, from last night - before she left, she committed and pushed. She goes on to tell me: ``I find everyone who comes onto this project has never used version control before - I hadn't - but it makes everyone's life easier.'' Indeed even when I had first begun this study, she was far less comfortable with version control.  %[OCND_FN150622_KK]
Besides version control enforced for all, there is considerable discussion and standardization of file structure, and \textit{where} things should go in this team - to avoid the kinds of problems that version control cannot fix.
%So I would say by chance – I mean, by chance – we use R so everything is open source, and there is a Bioconductor repository where all—where most flow cytometry package that I use are free there, are released there.  There is GitHub that allow me to follow when there is a new – see, I follow this specific lab, and I know when something is new, so this is a really good way for me to keep track when something new is available, but if it’s something else from this lab or from someone does not use GitHub or whatever, I would just miss it, and to be honest, most of the time when I see a code that is created by these people, I’m, like, okay, is it – okay, I spend a lot of – I spend a lot of – going what is really – what is – what has it really doing, right.- “Franz”