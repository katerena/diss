\section{Summary}


Lastly, claims of how software engineering practice can beneficially inform how scientists do code work seem to assume major, or even fundamental, differences between these. In Section 2.1, I include a review of ways in which existing literature has delineated scientific work as separate from software engineering in more typical (e.g., business) contexts. Code work in science, at it has been studied by and others \cite{easterbrook2009engineering,kelly2015scientific,paine2014producing},  is specialized and varies by context. However, so does ``typical'' software engineering, which contains ``amethodical'' practices despite a rhetorical emphasis on the ``methodical'' \cite{truex2000amethodical}. The emphasis on ``best practices,'' which are in constant flux \cite{sletholt2011literature} and open to a degree of interpretation, can be seen as ``moral claims of practical necessity'' \cite{winner2010whale}. Leach, speaking of Free/Libre Open Source Software notes (emphases added):
\litquote{leach2009freedom}{The concept of
\textbf{`better software' (a material judgement)}, which arises from \textbf{`better' processes of production (a moral judgement)} conceals another complex series of understandings and judgements generated by familiarity with and proximity to the workings of the machine (computer) itself.}

Section 5.1 on formats and data structures united those terms over challenges in how a scientist determines the value of something during trouble-shooting an unexpected behavior. Section 5.2 on version control considered both version control of software, of data, and of projects, and the extent to which these use cases are covered by the standard pitch for GitHub. The last Section 5.3 covers a range of different subjects, pulled together by the common thread of \emph{communication and feedback} in code work, spanning design and maintenance.

Getting data representation, in terms of data structures and formats, right on the first try is an impractical, if not impossible, goal to tackle. The problems of prior non-ideal decisions in this area result in problems over time, as researchers attempt to improve the data representation schemes and get into compatibility issues with prior runs. In a perfect world, version control would help ease the pain of progress and change. In the practical reality, though, ``version control'' is a behemoth philosophy with all manner of baggage: it bears with it not only the bash shell, but the cloud, open-source and open-science, and even professional identity management. Regardless which particular version control tool is most approachable  the entire mass of intertwined demands can make it seem like only a massive overhaul of work practice will do, and no incremental improvements are possible without commitment of time and resources that are simply not available.

The other programing practices - those covered in Section 5.3 - all share a quality of being less immediately-relevant than version control, as well as being (like version control, in fact) various levels of formalisations of practices that already routinely take place and arise out of the normal skepticism, feedback, and teaching that are omnipresent in scientific work. However, formalizing them by deliberately and explicitly incorporating software engineering narratives and aesthetics can be a hard sell:  cost and benefit are hard to determine ahead of time. Moreover, teaching and mentorship is a major part of what the PIs and research staff do, so the costs include not only the cost of that researcher embarking on an unknown path, but also the cost of then guiding a hypothetical future student along that path.

It is possible, from the perspective of a software engineer, to look at a broad range of code work in science and be understandably perplexed: this would all be far easier if only the scientists who code would adopt all these tools and processes. However, this requires adopting everything more or less all at ones. The main thing that everyone agrees on regarding the SWC curriculum - students and instructors alike - is its ambitious and dizzying breadth, and the difficulty (impossibility, according to some) of covering it all in the allotted time. But even in designing their own SWC-based curriculum, the oceanographers of the RegionalNowcast-Model team were unable to condense anything, or take anything out. The only thing they left out were the databases: they did not use them. But all the tools that they \emph{had} successfully incorporated into their work were now indispensable and inextricably connected.

The opportunities for incremental improvement exist in the very area that receives relatively little attention compared to version control and data formats: the formalized social protocols  in Section 5.3. Furthermore the teams most successful in incorporating version control and particularly effective data organisations described their solutions as ``just'' whatever-they-were: nothing was the golden ticket, or the silver bullet, or the stone that would get two birds. They managed to avoid the overloading of one concept (e.g., version control) into many distracting ones, and this helped make steady progress in manageable steps with minimal time-consuming overhauls. RegionalNowcast-Model group had adopted an impressive number of the best practices that they value. During the course of the 18-month study, Lindsay, a post-doctoral researcher, went from beginning version control to being motivated to explore automated testing frameworks. They did not start with best practices, but instead built up different skills piecewise and over time.

Everything is project-centered, and many things start as ``interesting explorations'' and ``side projects'' which are not deemed to be in the purview of whatever advanced organization solution other more ``mature" projects are in. As a result there is this moment when a side project graduates to being an important project where old ``technical debts'' must be paid. In explaining why he did not use version control in grad school  a post-doctoral researcher in one of the groups tells me that he ``had organizational problems that were nothing version control would have fixed.'' There are several way in which the best practices addressed in this chapter outlined above is insufficient in scenarios where (1) visualizations are pivotal conceptual/organizational elements and (2) reproducibility and automation can create a tension around what does or does not need to be abstracted out and encapsulated.

The three sections in this chapter offer a view on various ``ideals,'' and deviations from these ``ideals.'' The selective, sometimes deliberate deviation from these ideals on the part of the programming scientist who is ``not a real programmer'' is indicative not so much of a failing but of a different concept of effective persistence - and what effective persistence \textit{requires} - in a specialized context. In practice, the conversation of what scientists ought or ought not do in the realm of code admits that the context is different (e.g., \cite{heaton2015claims} \cite{heaton2015claims,ribes2009long,borgman2012whos}, but I add a more concrete way of thinking about these differences that validates the informed choice to adopt, \textit{adapt}, or altogether reject a recommended ``best practice.''

However, in some situations, there are problems that \textit{could} be addressed by best practices, and a recognition of this, but without a sense of how to proceed \textit{incrementally}, without a wholesale overhaul of existing practice. Version control, especially GitHub adoption, is by far the most common of the particular best practices to be mentioned (often in the ``I should be using \_, but I am not'' context); however, the most effective practices as they were adopted by participants were formalisations of the communication patterns described in Section 3

What is the test for whether a particular ``best practice'' has been adopted, or adopted poorly, or simply evolved naturally without any intentional adoption of it at all? Is it important for something to be intentionally adopted for outside observes to then measure how well it is working as an intervention, or does it no longer count as an intervention? In the next chapter, I delve into \textit{deliberate} acts of change.
