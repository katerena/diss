\abstract{%

%PROBLEM-SPACe
Scientists have been producing and sharing code for decades. Code work done by scientists spans simulation, data processing, analysis, visualization, and data stewardship. Robust instrumentation generates data beyond the processing power of an individual using minimal automation, and instead requires more automation and/or collaboration. Sophisticated web frameworks enable more interactive web portals for displaying data or simulation results to various stakeholders. Educational initiatives that target scientists learning to program are increasingly available, and increasingly reach enrollment limits. How is programming in science changing? Change enacted in scientific programming practice is intended to lead to code that is not only long-lived, but possesses long-lived usefulness. Although deliberate change is oriented toward this goal, a particular tool or protocol does not require sustained use by a group to have  impact on the work practices of that group. In the course of this dissertation, I develop an alternative conceptual framework for reflecting on the goals and outcomes of change.

%I DID MY OBSERVATION
My findings are based on over 300 hours of observation of a total of 46 scientists from four different oceanography groups. Of the 46 scientists, 21 comprise the core study participants, doing code work at graduate, post-graduate, and faculty levels. Two of four the oceanography groups focus on simulation, and two on observational data analysis. All engage in deliberate, reflective change of their programming skills and practices. In collecting and analysing qualitative data, I focus on ``code work'' in a broader sense, rather than referring to ``scripting,'' ``high-performance computing,'' ``scientific software engineering,'' ``data science,'' or other more specific terms in that imply particular working environments and aesthetics. Maintaining an inclusive scope allows me to not only draw parallels between these practices, but also to consider ways in which they intersect and influence one another. Particular practices or philosophies can be pervasive through all layers of code work, from maintaining a co-authored LaTeX-typeset manuscript in GitHub, to ``adding biology'' to a well-established model, to implementing an automated test suite for an analytic pipeline that generates daily results and images for a web endpoint.

%PREV THINGS ARE DEFINED IN TERMS OF TECHNICAL RESOURCES NAD REQUIREMENTS. 

%Missing transition that we're talking about the working envrionment: I PRESENT MY FINDINGS IN TEMRS OF [TERMS] 0 SETTING OUT A SET OF DEFINITION / I DISTILL A SET OF CONCEPTS/DEFINITIONS - REVERSE THE PARENTHETICAL of social (e.g., ....) - IDENTIFY THESE AS "COMPONENTS"
The working environment combines cognitive, technical, and social resources. For example, consider iPython Notebook and Google (technical), in an office shared with frequent ``hey, how do you [do a particular tricky thing]?'' (social), looking at many small charts encoding information in a familiar and consistent way to aid quick understanding (cognitive). The working environment is subject to change, and this change is informed and directed by a collective imagination of a perfect world. The perfect world is the moving target to which possible modifications to the current way of working can be  compared. Change to the working environment includes not only the technical components (tools) but also cognitive (skills) and social (communication practices and language).

The moment when scientists elect to pursue deliberate change requires two things: momentum and  opportunity. These can be created in the wake of a breakdown of the prior approach, in the space created by embarking on a new project, or through an energizing workshop or group event. These cases allow the exploration of options that are already in the awareness or intention. The ``leap'' of deliberate change requires both momentum and opportunity because the act of integrating an unfamiliar component, or learning a new skill, is associated with uncertainty and the possibility of disappointment or failure. The conceptual framework I propose creates vocabulary for looking on the bright side of this possibility, which is inevitable as projects involve more people, longer time spans, and more ambitious cross-overs between disciplines. Encouraging the sharing of negative results and disappointing data are among the top priorities for discussion of ``best practices'' in open science, and so should be the development of concrete ways to deliver interpersonal rewards in the wake of code work not panning out as well as hoped or intended.}
