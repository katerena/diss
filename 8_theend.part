\chapter{Conclusion}

In this dissertation, I develop a conceptual framework based on code work done by four oceanography teams. These findings may also be applicable in other scientific contexts where people with different disciplinary backgrounds use different methods to contribute to a integrated understanding, where data and code sharing are central but not necessarily standardized or embedded in a common infrastructure, and where programming activities span a variety of needs and orders of complexity. This framework offers a way of looking at the different forms of code work in an interconnected manner. This permits recognition of, and reasoning about, the extent to which deliberate changes in the way people write code impacts larger projects that can impact in fundamental ways the means of knowing.

As part of the framework, I introduced several concepts and definitions for articulating the context of \textit{code work} done by scientists. A \textit{working environment} includes tools and practices spanning data cleaning tasks, analytic tasks, manuscript management, and any other form of code work in the broader sense. Furthermore, the working environment accommodates \textit{technical}, \textit{social}, as well as \textit{cognitive} resources. It is subject to change, driven by \textit{momentum} and \textit{opportunity}, which might be precipitate from a variety of factors like a breakdown of existing process or from the exciting beginning of a new project. The catalyst for the \textit{moment of flux} is not limited to problems in dire need of a solution; it can also arise from curiosity, interest, and a sense of awe at the possibilities offered by adopting a particular technology. I defined these concepts in Chapters 4 and 6, and illustrated them in Figures \ref{fig:cycle1} and \ref{fig:cycle2}.

A singular focus on problem-solving may marginalize opportunities for innovation that could drive community engagement, and, therefore, momentum and adoption. The deliberate acts of   change in the moment of flux arise from action which is built up from awareness of, and intention to adopt, any of a variety of possible tools and skills. Workshops and tutorials help to built this awareness, and therefore are instrumental in changing code work over time, even if not directly resulting in immediate or sustained adoption. Adoption of an intervention, either a software tool or an education workshop, does not require a specific idea of how to integrate the new tool or skill into practice; more commonly, change is undertaken as a way to work toward a \textit{collective imagination of a perfect world} where more is possible. While the decision to adopt something \textit{is} associated with the hope that it will address an outstanding issue in a concrete way, the intervention must go beyond addressing a ``pain-point.'' Furthermore, \textit{sustained} adoption is not a requirement for the tool or skill to have a broader impact on the  \textit{collective imagination of the perfect world} that directs ongoing changes to the working environment.

Whereas Chapter 4 maintained the stance of characterizing how oceanographers do code work, Chapter 5 built on this dynamic, adding ``best practices'' as one facet of imagined the perfect world, as it is informed software engineering practice. Programming \textit{best practices} constitute some of the most common components of the collective imagination of the perfect world because they offer a means for making code more understandable, usable (and re-usable), and extensible in the future, and improve its access to a broader audience with less individualized guidance effort needed. This maps onto reproducibility and open science values, which are part of the zeitgeist informing the inclusion criterion for this interview and observation-based study. When it comes to pursuing better practices - by modifying the working environment in the direction of the \textit{best practices} in the perfect world - there are many options for adoption of particular tools, all of which require adapting the tools to the particular context of a project, for example relative to existing dependencies and any associated requirements. There are even more options for formalising social protocols for \textit{communication and feedback}, such as pair programming, code review, or specific protocols for documentation, which were explored in Chapter 5.

The conceptual framework I propose, along with the stories which illustrate it, is based on over 300 hours of interviews and observations with oceanographers across 4 academic groups in the Pacific Northwest, as well as participants of short-term programming education initiatives aimed at scientists (such as Software Carpentry Workshops). In conducting this qualitative study, I bridge my computer science training with research methods of my committee and colleagues in Computer-Supported Cooperative Work and Science and Technology Studies. This study had a wide breadth, including several very different scientific teams in the sample, and spanned 18 months; as such, it provides a snapshot of practices, and would be complemented by more in-depth longer-term studies, and comparative studies in other domains or after some years elapse.

Chapter 7 walks through three case studies, applying the perspective that the proposed conceptual framework enables, each of which concludes with a take-away for evaluation. The most important take-away from this dissertation is that engaging with software interventions, such as programming workshops or particular tools, offers community and skill benefits whether it results in sustained adoption.   As software projects in science become more ambitious, transformation requires a language that recognizes and rewards the collective pursuit of uncertain possible worlds.